# Workflow CI/CD para despliegue en Azure Static Web Apps.
# Automatiza la construcción y el despliegue de la aplicación SvelteKit.
name: Azure Static Web Apps CI/CD for SvelteKit

# Define los eventos que activan este workflow.
on:
  push:
    # Despliega solo cuando se hace push a la rama 'master'.
    branches:
      - master
  pull_request:
    # Ejecuta el workflow para Pull Requests (para validación y entornos de vista previa).
    types: [opened, synchronize, reopened, closed]
    branches:
      - master

# Define los trabajos (jobs) del workflow.
jobs:
  build_and_deploy_job:
    # Condición para ejecutar el trabajo: push a 'master' o PR abierto/sincronizado/reabierto.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    # El entorno de ejecución para este trabajo.
    runs-on: ubuntu-latest

    # Nombre del trabajo.
    name: Build and Deploy SvelteKit App

    # Configuración del entorno de despliegue para reportar la URL en GitHub Actions.
    environment:
      name: 'Production' # Nombre del entorno de despliegue.
      url: https://mango-cliff-0c6c03b1e.2.azurestaticapps.net # URL obtenida de azure

    # Pasos a ejecutar en este trabajo.
    steps:
      # Paso 1: Descarga el código del repositorio.
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true # Clona submódulos si existen.
          lfs: false # Ignora archivos LFS para optimizar.

      # Paso 2: Configura el entorno de Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '24.x' # Utiliza la versión 24.x de Node.js para compatibilidad.

      # Paso 3: Construye la aplicación SvelteKit.
      # Ejecuta los comandos de instalación de dependencias y compilación.
      - name: Build SvelteKit Application
        run: |
          npm install # Instala las dependencias del proyecto.
          npm run build # Ejecuta el script de build definido en package.json.
        env:
          # Opciones de Node.js para compatibilidad con OpenSSL (si es necesario).
          NODE_OPTIONS: '--openssl-legacy-provider'
          # Activa el modo de depuración de Oryx para logs detallados.
          ORYX_DEBUG_MODE: 'true'

      # Paso 4: Despliega la aplicación estática en Azure Static Web Apps.
      - name: Deploy to Azure Static Web App
        id: deploy_to_swa # ID para referenciar las salidas de este paso.
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Token de autenticación para Azure Static Web Apps (secreto de GitHub).
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_MANGO_CLIFF_0C6C03B1E }}
          # Token de GitHub para integraciones (e.g., comentarios en PRs).
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload' # Acción de despliegue.
          # Ruta de la aplicación compilada, lista para servir.
          app_location: 'build'
          # Ruta del código de la API (Azure Functions). Vacío si no hay API.
          api_location: ''
          # Directorio de salida del build (menos relevante con skip_app_build: true).
          output_location: 'build'
          # Omite el proceso de build de Oryx, ya que la aplicación se construye en un paso anterior.
          skip_app_build: true

  # Trabajo para cerrar entornos de vista previa de Pull Requests.
  close_pull_request_job:
    # Se ejecuta cuando un Pull Request se cierra.
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Environment
    steps:
      - name: Close Pull Request Environment
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_MANGO_CLIFF_0C6C03B1E }}
          action: 'close' # Cierra el entorno de vista previa asociado al PR.
